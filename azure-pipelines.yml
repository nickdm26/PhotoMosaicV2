# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- main

resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 'd01b17d9-5b22-43e8-8468-c6cb7ae55862'
  imageRepository: 'photomosaicv2'
  containerRegistry: 'nickdm26containerregistry.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/PhotoMosaicAPI/Dockerfile'
  tag: '$(Build.BuildId)'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

# stages:
# - stage: Build
#   displayName: Build and push stage
#   jobs:
#   - job: Build
#     displayName: Build
#     pool:
#       vmImage: $(vmImageName)
#     steps:
#     - task: Docker@2
#       displayName: Build and push an image to container registry
#       inputs:
#         command: buildAndPush
#         repository: $(imageRepository)
#         dockerfile: $(dockerfilePath)
#         containerRegistry: $(dockerRegistryServiceConnection)
#         tags: |
#           $(tag)

stages:
- stage: Build
  displayName: Build image
  jobs:  
  - job: Build
    displayName: Build, Test and then push Docker image
    steps:
    - task: Docker@2
      displayName: 'Build the Docker image'
      inputs:
        repository: $(imageRepository)
        containerRegistry: $(dockerRegistryServiceConnection)
        command: 'Build'
        dockerfile: $(dockerfilePath)

    - pwsh: |
       $id=docker images --filter "label=test=true" -q | Select-Object -First 1
       docker create --name testcontainer $id
       docker cp testcontainer:/testresults ./testresults
       docker rm testcontainer
      displayName: 'Copy test results'
   
    - task: PublishTestResults@2
      displayName: 'Publish test results'
      inputs:
        testResultsFormat: 'VSTest'
        testResultsFiles: '**/*.trx'
        searchFolder: '$(System.DefaultWorkingDirectory)/testresults'
      

    - task: Docker@2
      displayName: 'Push the Docker image to Dockerhub'
      inputs:
        command: 'Push'
        repository: $(imageRepository)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
      condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))